{
synchronized (this) {
    Log.d("DEBUG","TileRenderPoolExecutor.queue, before intersection: " + mExecutingTileRenderTasks.size() + ", "+ mCancelledTileRenderTasks.size());
    List<TileRenderTask> completeTasks=new LinkedList<>();
    for (    TileRenderTask tileRenderTask : mExecutingTileRenderTasks) {
      if (tileRenderTask.runnable.isDone()) {
        completeTasks.add(tileRenderTask);
      }
 else {
        if (renderList.contains(tileRenderTask.tile)) {
          renderList.remove(tileRenderTask.tile);
        }
 else {
          mCancelledTileRenderTasks.add(tileRenderTask);
        }
      }
    }
    mExecutingTileRenderTasks.removeAll(completeTasks);
    mExecutingTileRenderTasks.removeAll(mCancelledTileRenderTasks);
    Log.d("DEBUG","TileRenderPoolExecutor.queue, after intersection: " + mExecutingTileRenderTasks.size() + ", "+ mCancelledTileRenderTasks.size());
    stopCancelledTasks();
    if (renderList.size() > 0) {
      mTileCanvasViewGroupWeakReference=new WeakReference<>(tileCanvasViewGroup);
      tileCanvasViewGroup.onRenderTaskPreExecute();
      for (      Tile tile : renderList) {
        if (isShutdownOrTerminating()) {
          return;
        }
        TileRenderTask task=new TileRenderTask();
        task.tile=tile;
        task.runnable=new TileRenderRunnable();
        task.runnable.setTile(tile);
        task.runnable.setTileCanvasViewGroup(tileCanvasViewGroup);
        task.runnable.setTileRenderPoolExecutor(this);
        task.future=submit(task.runnable);
        mExecutingTileRenderTasks.add(task);
      }
    }
  }
}
