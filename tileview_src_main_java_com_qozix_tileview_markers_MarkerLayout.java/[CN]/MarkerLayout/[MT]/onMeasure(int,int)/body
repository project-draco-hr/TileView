{
  measureChildren(widthMeasureSpec,heightMeasureSpec);
  int currentGreatestWidth=getSuggestedMinimumWidth();
  int currentGreatestHeight=getSuggestedMinimumHeight();
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      MarkerLayout.LayoutParams layoutParams=(MarkerLayout.LayoutParams)child.getLayoutParams();
      float widthMultiplier=(layoutParams.anchorX == null) ? mAnchorX : layoutParams.anchorX;
      float heightMultiplier=(layoutParams.anchorY == null) ? mAnchorY : layoutParams.anchorY;
      int actualWidth=child.getMeasuredWidth();
      int actualHeight=child.getMeasuredHeight();
      float widthOffset=actualWidth * widthMultiplier;
      float heightOffset=actualHeight * heightMultiplier;
      int scaledX=(int)(0.5 + (layoutParams.x * mScale));
      int scaledY=(int)(0.5 + (layoutParams.y * mScale));
      layoutParams.mLeft=(int)(scaledX + widthOffset);
      layoutParams.mTop=(int)(scaledY + heightOffset);
      layoutParams.mRight=layoutParams.mLeft + actualWidth;
      layoutParams.mBottom=layoutParams.mTop + actualHeight;
      currentGreatestWidth=Math.max(currentGreatestWidth,layoutParams.mRight);
      currentGreatestHeight=Math.max(currentGreatestHeight,layoutParams.mBottom);
    }
  }
  currentGreatestWidth=resolveSize(currentGreatestWidth,widthMeasureSpec);
  currentGreatestHeight=resolveSize(currentGreatestHeight,heightMeasureSpec);
  setMeasuredDimension(currentGreatestWidth,currentGreatestHeight);
}
